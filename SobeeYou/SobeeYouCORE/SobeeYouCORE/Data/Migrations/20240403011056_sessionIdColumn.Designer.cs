// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SobeeYouCORE.Models.DbModels.Identity;

#nullable disable

namespace SobeeYouCORE.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240403011056_sessionIdColumn")]
    partial class sessionIdColumn
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("db_owner")
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AspNetUserRole", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex(new[] { "RoleId" }, "IX_AspNetUserRoles_RoleId");

                    b.ToTable("AspNetUserRoles", "db_owner");
                });

            modelBuilder.Entity("SobeeYouCORE.Models.DbModels.Identity.AspNetRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "NormalizedName" }, "RoleNameIndex")
                        .IsUnique()
                        .HasFilter("([NormalizedName] IS NOT NULL)");

                    b.ToTable("AspNetRoles", "db_owner");
                });

            modelBuilder.Entity("SobeeYouCORE.Models.DbModels.Identity.AspNetRoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RoleId" }, "IX_AspNetRoleClaims_RoleId");

                    b.ToTable("AspNetRoleClaims", "db_owner");
                });

            modelBuilder.Entity("SobeeYouCORE.Models.DbModels.Identity.AspNetUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<int>("IntUserRoleId")
                        .HasColumnType("int")
                        .HasColumnName("intUserRoleID");

                    b.Property<DateTime?>("LastLoginDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StrBillingAddress")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("")
                        .HasColumnName("strBillingAddress");

                    b.Property<string>("StrFirstName")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("")
                        .HasColumnName("strFirstName");

                    b.Property<string>("StrLastName")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("")
                        .HasColumnName("strLastName");

                    b.Property<string>("StrShippingAddress")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("")
                        .HasColumnName("strShippingAddress");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "NormalizedEmail" }, "EmailIndex");

                    b.HasIndex(new[] { "NormalizedUserName" }, "UserNameIndex")
                        .IsUnique()
                        .HasFilter("([NormalizedUserName] IS NOT NULL)");

                    b.ToTable("AspNetUsers", "db_owner");
                });

            modelBuilder.Entity("SobeeYouCORE.Models.DbModels.Identity.AspNetUserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "UserId" }, "IX_AspNetUserClaims_UserId");

                    b.ToTable("AspNetUserClaims", "db_owner");
                });

            modelBuilder.Entity("SobeeYouCORE.Models.DbModels.Identity.AspNetUserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex(new[] { "UserId" }, "IX_AspNetUserLogins_UserId");

                    b.ToTable("AspNetUserLogins", "db_owner");
                });

            modelBuilder.Entity("SobeeYouCORE.Models.DbModels.Identity.AspNetUserToken", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", "db_owner");
                });

            modelBuilder.Entity("SobeeYouCORE.Models.DbModels.Tadmin", b =>
                {
                    b.Property<int>("intAdminID")
                        .HasColumnType("int")
                        .HasColumnName("intAdminID");

                    b.Property<string>("strAdminName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("strAdminName");

                    b.HasKey("intAdminID")
                        .HasName("TAdmins_PK");

                    b.ToTable("TAdmins", "db_owner");
                });

            modelBuilder.Entity("SobeeYouCORE.Models.DbModels.TcartItem", b =>
                {
                    b.Property<int>("intCartItemID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("intCartItemID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("intCartItemID"));

                    b.Property<DateTime>("dtmDateAdded")
                        .HasColumnType("datetime")
                        .HasColumnName("dtmDateAdded");

                    b.Property<int>("intProductID")
                        .HasColumnType("int")
                        .HasColumnName("intProductID");

                    b.Property<int>("intQuantity")
                        .HasColumnType("int")
                        .HasColumnName("intQuantity");

                    b.Property<int>("intShoppingCartID")
                        .HasColumnType("int")
                        .HasColumnName("intShoppingCartID");

                    b.HasKey("intCartItemID")
                        .HasName("PK__TCartIte__4A33868DCDF2DFE8");

                    b.HasIndex("intProductID");

                    b.HasIndex("intShoppingCartID");

                    b.ToTable("TCartItems", "db_owner");
                });

            modelBuilder.Entity("SobeeYouCORE.Models.DbModels.Tcity", b =>
                {
                    b.Property<int>("intCityID")
                        .HasColumnType("int")
                        .HasColumnName("intCityID");

                    b.Property<string>("strCity")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("strCity");

                    b.HasKey("intCityID")
                        .HasName("TCities_PK");

                    b.ToTable("TCities", "db_owner");
                });

            modelBuilder.Entity("SobeeYouCORE.Models.DbModels.Tcoupon", b =>
                {
                    b.Property<int>("intCouponID")
                        .HasColumnType("int")
                        .HasColumnName("intCouponID");

                    b.Property<DateTime>("dtmExpirationDate")
                        .HasColumnType("datetime")
                        .HasColumnName("dtmExpirationDate");

                    b.Property<string>("strCouponCode")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("strCouponCode");

                    b.Property<string>("strDiscountAmount")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("strDiscountAmount");

                    b.HasKey("intCouponID")
                        .HasName("TCoupons_PK");

                    b.ToTable("TCoupons", "db_owner");
                });

            modelBuilder.Entity("SobeeYouCORE.Models.DbModels.TcustomerServiceTicket", b =>
                {
                    b.Property<int>("intCustomerServiceTicketID")
                        .HasColumnType("int")
                        .HasColumnName("intCustomerServiceTicketID");

                    b.Property<int>("TUserintUserID")
                        .HasColumnType("int");

                    b.Property<int>("TicketStatusintTicketStatusID")
                        .HasColumnType("int");

                    b.Property<DateTime>("dtmTimeOfSubmission")
                        .HasColumnType("datetime")
                        .HasColumnName("dtmTimeOfSubmission");

                    b.Property<int>("intTicketCategoryID")
                        .HasColumnType("int")
                        .HasColumnName("intTicketCategoryID");

                    b.Property<int>("intTicketStatusID")
                        .HasColumnType("int")
                        .HasColumnName("intTicketStatusID");

                    b.Property<int>("intUserID")
                        .HasColumnType("int")
                        .HasColumnName("intUserID");

                    b.Property<string>("strDescription")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("strDescription");

                    b.Property<string>("userID")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("user_id");

                    b.HasKey("intCustomerServiceTicketID")
                        .HasName("TCustomerServiceTickets_PK");

                    b.HasIndex("TUserintUserID");

                    b.HasIndex("TicketStatusintTicketStatusID");

                    b.HasIndex("intTicketStatusID");

                    b.HasIndex("userID");

                    b.ToTable("TCustomerServiceTickets", "db_owner");
                });

            modelBuilder.Entity("SobeeYouCORE.Models.DbModels.TdrinkCategory", b =>
                {
                    b.Property<int>("intDrinkCategoryID")
                        .HasColumnType("int")
                        .HasColumnName("intDrinkCategoryID");

                    b.Property<string>("strDrinkCategory")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("strDrinkCategory");

                    b.HasKey("intDrinkCategoryID")
                        .HasName("TDrinkCategories_PK");

                    b.ToTable("TDrinkCategories", "db_owner");
                });

            modelBuilder.Entity("SobeeYouCORE.Models.DbModels.Tfavorite", b =>
                {
                    b.Property<int>("intFavoriteID")
                        .HasColumnType("int")
                        .HasColumnName("intFavoriteID");

                    b.Property<string>("strFavorite")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("strFavorite");

                    b.HasKey("intFavoriteID")
                        .HasName("TFavorites_PK");

                    b.ToTable("TFavorites", "db_owner");
                });

            modelBuilder.Entity("SobeeYouCORE.Models.DbModels.Tflavor", b =>
                {
                    b.Property<int>("intFlavorID")
                        .HasColumnType("int")
                        .HasColumnName("intFlavorID");

                    b.Property<string>("strFlavor")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("strFlavor");

                    b.HasKey("intFlavorID")
                        .HasName("TFlavors_PK");

                    b.ToTable("TFlavors", "db_owner");
                });

            modelBuilder.Entity("SobeeYouCORE.Models.DbModels.Tgender", b =>
                {
                    b.Property<int>("intGenderID")
                        .HasColumnType("int")
                        .HasColumnName("intGenderID");

                    b.Property<string>("strGender")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("strGender");

                    b.HasKey("intGenderID")
                        .HasName("TGenders_PK");

                    b.ToTable("TGenders", "db_owner");
                });

            modelBuilder.Entity("SobeeYouCORE.Models.DbModels.Tingredient", b =>
                {
                    b.Property<int>("intIngredientID")
                        .HasColumnType("int")
                        .HasColumnName("intIngredientID");

                    b.Property<string>("strIngredient")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("strIngredient");

                    b.HasKey("intIngredientID")
                        .HasName("TIngredients_PK");

                    b.ToTable("TIngredients", "db_owner");
                });

            modelBuilder.Entity("SobeeYouCORE.Models.DbModels.Torder", b =>
                {
                    b.Property<int>("intOrderID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("intOrderID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("intOrderID"));

                    b.Property<decimal>("decTotalAmount")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("decTotalAmount");

                    b.Property<DateTime>("dtmOrderDate")
                        .HasColumnType("datetime")
                        .HasColumnName("dtmOrderDate");

                    b.Property<int>("intPaymentMethod")
                        .HasColumnType("int")
                        .HasColumnName("intPaymentMethod");

                    b.Property<int>("intShippingStatusID")
                        .HasColumnType("int")
                        .HasColumnName("intShippingStatusID");

                    b.Property<int>("intUserID")
                        .HasColumnType("int")
                        .HasColumnName("intUserID");

                    b.Property<string>("strOrderStatus")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasDefaultValue("Pending")
                        .HasColumnName("strOrderStatus");

                    b.Property<string>("strShippingAddress")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("strShippingAddress");

                    b.Property<string>("strTrackingNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("strTrackingNumber");

                    b.Property<string>("userID")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("user_id");

                    b.HasKey("intOrderID")
                        .HasName("PK__TOrders__447BBC4445C2DAD9");

                    b.HasIndex("intPaymentMethod");

                    b.HasIndex("intShippingStatusID");

                    b.HasIndex("intUserID");

                    b.HasIndex("userID");

                    b.ToTable("TOrders", "db_owner");
                });

            modelBuilder.Entity("SobeeYouCORE.Models.DbModels.TorderItem", b =>
                {
                    b.Property<int>("intOrderItemID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("intOrderItemID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("intOrderItemID"));

                    b.Property<int>("intOrderID")
                        .HasColumnType("int")
                        .HasColumnName("intOrderID");

                    b.Property<int>("intProductID")
                        .HasColumnType("int")
                        .HasColumnName("intProductID");

                    b.Property<int>("intQuantity")
                        .HasColumnType("int")
                        .HasColumnName("intQuantity");

                    b.Property<decimal>("monPricePerUnit")
                        .HasColumnType("money")
                        .HasColumnName("monPricePerUnit");

                    b.HasKey("intOrderItemID")
                        .HasName("PK__TOrderIt__33B60225A0D3B9FE");

                    b.HasIndex("intOrderID");

                    b.HasIndex("intProductID");

                    b.ToTable("TOrderItems", "db_owner");
                });

            modelBuilder.Entity("SobeeYouCORE.Models.DbModels.TordersProduct", b =>
                {
                    b.Property<int>("intOrdersProductID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("intOrdersProductID"));

                    b.Property<int>("intProductID")
                        .HasColumnType("int");

                    b.Property<string>("strOrdersProduct")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("intOrdersProductID");

                    b.HasIndex("intProductID");

                    b.ToTable("TordersProducts", "db_owner");
                });

            modelBuilder.Entity("SobeeYouCORE.Models.DbModels.Tpayment", b =>
                {
                    b.Property<int>("intPaymentID")
                        .HasColumnType("int")
                        .HasColumnName("intPaymentID");

                    b.Property<int?>("intPaymentMethod")
                        .HasColumnType("int")
                        .HasColumnName("intPaymentMethod");

                    b.Property<int?>("intPaymentMethodID")
                        .HasColumnType("int")
                        .HasColumnName("intPaymentMethodID");

                    b.Property<string>("strBillingAddress")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("strBillingAddress");

                    b.HasKey("intPaymentID")
                        .HasName("TPayments_PK");

                    b.ToTable("TPayments", "db_owner");
                });

            modelBuilder.Entity("SobeeYouCORE.Models.DbModels.TpaymentMethod", b =>
                {
                    b.Property<int>("intPaymentMethod")
                        .HasColumnType("int")
                        .HasColumnName("intPaymentMethod");

                    b.Property<string>("strPaymentMethodName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("strPaymentMethodName");

                    b.HasKey("intPaymentMethod")
                        .HasName("PK__TPayment__74D498AF41BBBA60");

                    b.ToTable("TPaymentMethods", "db_owner");
                });

            modelBuilder.Entity("SobeeYouCORE.Models.DbModels.TpaymentStatus", b =>
                {
                    b.Property<int>("intPaymentStatusID")
                        .HasColumnType("int")
                        .HasColumnName("intPaymentStatusID");

                    b.Property<string>("strPaymentStatus")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("strPaymentStatus");

                    b.HasKey("intPaymentStatusID")
                        .HasName("PK__TPayment__4141EB108DDA446F");

                    b.ToTable("TPaymentStatus", "db_owner");
                });

            modelBuilder.Entity("SobeeYouCORE.Models.DbModels.Tpermission", b =>
                {
                    b.Property<int>("intPermissionID")
                        .HasColumnType("int")
                        .HasColumnName("intPermissionID");

                    b.Property<string>("strDescription")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("strDescription");

                    b.Property<string>("strPermissionName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("strPermissionName");

                    b.HasKey("intPermissionID")
                        .HasName("TPermissions_PK");

                    b.ToTable("TPermissions", "db_owner");
                });

            modelBuilder.Entity("SobeeYouCORE.Models.DbModels.Tproduct", b =>
                {
                    b.Property<int>("intProductID")
                        .HasColumnType("int")
                        .HasColumnName("intProductID");

                    b.Property<decimal>("decPrice")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("decPrice");

                    b.Property<string>("strName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("strName");

                    b.Property<string>("strPrice")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("strPrice");

                    b.Property<string>("strStockAmount")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("strStockAmount");

                    b.HasKey("intProductID")
                        .HasName("TProducts_PK");

                    b.ToTable("TProducts", "db_owner");
                });

            modelBuilder.Entity("SobeeYouCORE.Models.DbModels.TproductImage", b =>
                {
                    b.Property<int>("intProductImageID")
                        .HasColumnType("int")
                        .HasColumnName("intProductImageID");

                    b.Property<string>("strProductImageUrl")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("strProductImageURL");

                    b.HasKey("intProductImageID")
                        .HasName("TProductImages_PK");

                    b.ToTable("TProductImages", "db_owner");
                });

            modelBuilder.Entity("SobeeYouCORE.Models.DbModels.TproductRecommendation", b =>
                {
                    b.Property<int>("intProductRecommendationID")
                        .HasColumnType("int")
                        .HasColumnName("intProductRecommendationID");

                    b.Property<DateTime>("dtmTimeOfRecommendation")
                        .HasColumnType("datetime")
                        .HasColumnName("dtmTimeOfRecommendation");

                    b.Property<int>("intProductID")
                        .HasColumnType("int")
                        .HasColumnName("intProductID");

                    b.Property<int>("intUserID")
                        .HasColumnType("int")
                        .HasColumnName("intUserID");

                    b.Property<string>("strRelevantScore")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("strRelevantScore");

                    b.Property<string>("userID")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("user_id");

                    b.HasKey("intProductRecommendationID")
                        .HasName("TProductRecommendations_PK");

                    b.HasIndex("intProductID");

                    b.HasIndex("intUserID");

                    b.HasIndex("userID");

                    b.ToTable("TProductRecommendations", "db_owner");
                });

            modelBuilder.Entity("SobeeYouCORE.Models.DbModels.Tpromotion", b =>
                {
                    b.Property<int>("intPromotionID")
                        .HasColumnType("int")
                        .HasColumnName("intPromotionID");

                    b.Property<DateTime>("dtmExpirationDate")
                        .HasColumnType("datetime")
                        .HasColumnName("dtmExpirationDate");

                    b.Property<string>("strDiscountPercentage")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("strDiscountPercentage");

                    b.Property<string>("strPromoCode")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("strPromoCode");

                    b.HasKey("intPromotionID")
                        .HasName("TPromotions_PK");

                    b.ToTable("TPromotions", "db_owner");
                });

            modelBuilder.Entity("SobeeYouCORE.Models.DbModels.Trace", b =>
                {
                    b.Property<int>("intRaceID")
                        .HasColumnType("int")
                        .HasColumnName("intRaceID");

                    b.Property<string>("strRace")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("strRace");

                    b.HasKey("intRaceID")
                        .HasName("TRaces_PK");

                    b.ToTable("TRaces", "db_owner");
                });

            modelBuilder.Entity("SobeeYouCORE.Models.DbModels.Treview", b =>
                {
                    b.Property<int>("intReviewID")
                        .HasColumnType("int")
                        .HasColumnName("intReviewID");

                    b.Property<int>("intProductID")
                        .HasColumnType("int")
                        .HasColumnName("intProductID");

                    b.Property<int>("intUserID")
                        .HasColumnType("int")
                        .HasColumnName("intUserID");

                    b.Property<string>("strRating")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("strRating");

                    b.Property<string>("strReviewText")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("strReviewText");

                    b.Property<string>("userID")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("user_id");

                    b.HasKey("intReviewID")
                        .HasName("TReviews_PK");

                    b.HasIndex("intProductID");

                    b.HasIndex("intUserID");

                    b.HasIndex("userID");

                    b.ToTable("TReviews", "db_owner");
                });

            modelBuilder.Entity("SobeeYouCORE.Models.DbModels.TshippingMethod", b =>
                {
                    b.Property<int>("intShippingMethodID")
                        .HasColumnType("int")
                        .HasColumnName("intShippingMethodID");

                    b.Property<DateTime>("dtmEstimatedDelivery")
                        .HasColumnType("datetime")
                        .HasColumnName("dtmEstimatedDelivery");

                    b.Property<string>("strBillingAddress")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("strBillingAddress");

                    b.Property<string>("strCost")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("strCost");

                    b.Property<string>("strShippingName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("strShippingName");

                    b.HasKey("intShippingMethodID")
                        .HasName("TShippingMethods_PK");

                    b.ToTable("TShippingMethods", "db_owner");
                });

            modelBuilder.Entity("SobeeYouCORE.Models.DbModels.TshippingStatus", b =>
                {
                    b.Property<int>("intShippingStatusID")
                        .HasColumnType("int")
                        .HasColumnName("intShippingStatusID");

                    b.Property<string>("strShippingStatus")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("strShippingStatus");

                    b.HasKey("intShippingStatusID")
                        .HasName("TShippingStatus_PK");

                    b.ToTable("TShippingStatus", "db_owner");
                });

            modelBuilder.Entity("SobeeYouCORE.Models.DbModels.TshoppingCart", b =>
                {
                    b.Property<int>("intShoppingCartID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("intShoppingCartID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("intShoppingCartID"));

                    b.Property<DateTime>("dtmDateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("dtmDateCreated")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime>("dtmDateLastUpdated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("dtmDateLastUpdated")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("userID")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("user_id");

                    b.HasKey("intShoppingCartID")
                        .HasName("PK__TShoppin__0A31291739EF1EA0");

                    b.HasIndex("userID");

                    b.ToTable("TShoppingCarts", "db_owner");
                });

            modelBuilder.Entity("SobeeYouCORE.Models.DbModels.Tstate", b =>
                {
                    b.Property<int>("intStateID")
                        .HasColumnType("int")
                        .HasColumnName("intStateID");

                    b.Property<string>("strState")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("strState");

                    b.HasKey("intStateID")
                        .HasName("TStates_PK");

                    b.ToTable("TStates", "db_owner");
                });

            modelBuilder.Entity("SobeeYouCORE.Models.DbModels.TticketCategory", b =>
                {
                    b.Property<int>("intTicketCategoryID")
                        .HasColumnType("int")
                        .HasColumnName("intTicketCategoryID");

                    b.Property<string>("strTicketCategory")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("strTicketCategory");

                    b.HasKey("intTicketCategoryID")
                        .HasName("TTicketCategories_PK");

                    b.ToTable("TTicketCategories", "db_owner");
                });

            modelBuilder.Entity("SobeeYouCORE.Models.DbModels.TticketStatus", b =>
                {
                    b.Property<int>("intTicketStatusID")
                        .HasColumnType("int")
                        .HasColumnName("intTicketStatusID");

                    b.Property<string>("strTicketStatus")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("strTicketStatus");

                    b.HasKey("intTicketStatusID")
                        .HasName("TTicketStatus_PK");

                    b.ToTable("TTicketStatus", "db_owner");
                });

            modelBuilder.Entity("SobeeYouCORE.Models.DbModels.Tuser", b =>
                {
                    b.Property<int>("intUserID")
                        .HasColumnType("int")
                        .HasColumnName("intUserID");

                    b.Property<int?>("intUserRoleID")
                        .HasColumnType("int")
                        .HasColumnName("intUserRoleID");

                    b.Property<string>("strBillingAddress")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("strBillingAddress");

                    b.Property<DateTime>("strDateCreated")
                        .HasColumnType("datetime")
                        .HasColumnName("strDateCreated");

                    b.Property<string>("strEmail")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("strEmail");

                    b.Property<string>("strFirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("strFirstName");

                    b.Property<DateTime>("strLastLoginDate")
                        .HasColumnType("datetime")
                        .HasColumnName("strLastLoginDate");

                    b.Property<string>("strLastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("strLastName");

                    b.Property<string>("strPassword")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("strPassword");

                    b.Property<string>("strShippingAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("strShippingAddress");

                    b.Property<string>("userID")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("ID");

                    b.HasKey("intUserID")
                        .HasName("TUsers_PK");

                    b.HasIndex("intUserRoleID");

                    b.ToTable("TUsers", "db_owner");
                });

            modelBuilder.Entity("SobeeYouCORE.Models.DbModels.TuserRole", b =>
                {
                    b.Property<int>("intUserRoleID")
                        .HasColumnType("int")
                        .HasColumnName("intUserRoleID");

                    b.Property<string>("strRole")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("strRole");

                    b.HasKey("intUserRoleID")
                        .HasName("TUserRoles_PK");

                    b.ToTable("TUserRoles", "db_owner");
                });

            modelBuilder.Entity("SobeeYouCORE.Models.MigrationHistory", b =>
                {
                    b.Property<string>("MigrationId")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("ContextKey")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<byte[]>("Model")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("ProductVersion")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.HasKey("MigrationId", "ContextKey")
                        .HasName("PK_dbo.__MigrationHistory");

                    b.ToTable("__MigrationHistory", "dbo");
                });

            modelBuilder.Entity("AspNetUserRole", b =>
                {
                    b.HasOne("SobeeYouCORE.Models.DbModels.Identity.AspNetRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SobeeYouCORE.Models.DbModels.Identity.AspNetUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SobeeYouCORE.Models.DbModels.Identity.AspNetRoleClaim", b =>
                {
                    b.HasOne("SobeeYouCORE.Models.DbModels.Identity.AspNetRole", "Role")
                        .WithMany("AspNetRoleClaims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("SobeeYouCORE.Models.DbModels.Identity.AspNetUserClaim", b =>
                {
                    b.HasOne("SobeeYouCORE.Models.DbModels.Identity.AspNetUser", "User")
                        .WithMany("AspNetUserClaims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SobeeYouCORE.Models.DbModels.Identity.AspNetUserLogin", b =>
                {
                    b.HasOne("SobeeYouCORE.Models.DbModels.Identity.AspNetUser", "User")
                        .WithMany("AspNetUserLogins")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SobeeYouCORE.Models.DbModels.Identity.AspNetUserToken", b =>
                {
                    b.HasOne("SobeeYouCORE.Models.DbModels.Identity.AspNetUser", "User")
                        .WithMany("AspNetUserTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SobeeYouCORE.Models.DbModels.TcartItem", b =>
                {
                    b.HasOne("SobeeYouCORE.Models.DbModels.Tproduct", "Product")
                        .WithMany("TcartItems")
                        .HasForeignKey("intProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__TCartItem__intPr__1D4655FB");

                    b.HasOne("SobeeYouCORE.Models.DbModels.TshoppingCart", "ShoppingCart")
                        .WithMany("TcartItems")
                        .HasForeignKey("intShoppingCartID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__TCartItem__intSh__1C5231C2");

                    b.Navigation("Product");

                    b.Navigation("ShoppingCart");
                });

            modelBuilder.Entity("SobeeYouCORE.Models.DbModels.TcustomerServiceTicket", b =>
                {
                    b.HasOne("SobeeYouCORE.Models.DbModels.Tuser", "TUser")
                        .WithMany("TcustomerServiceTickets")
                        .HasForeignKey("TUserintUserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SobeeYouCORE.Models.DbModels.TticketStatus", "TicketStatus")
                        .WithMany("tcustomerServiceTickets")
                        .HasForeignKey("TicketStatusintTicketStatusID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SobeeYouCORE.Models.DbModels.TticketCategory", "TicketCategory")
                        .WithMany("TcustomerServiceTicket")
                        .HasForeignKey("intTicketStatusID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("TCustomerServiceTickets_TTicketStatus_FK");

                    b.HasOne("SobeeYouCORE.Models.DbModels.Identity.AspNetUser", "User")
                        .WithMany("TcustomerServiceTicket")
                        .HasForeignKey("userID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_TCustomerServiceTickets_AspNetUsers");

                    b.Navigation("TUser");

                    b.Navigation("TicketCategory");

                    b.Navigation("TicketStatus");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SobeeYouCORE.Models.DbModels.Torder", b =>
                {
                    b.HasOne("SobeeYouCORE.Models.DbModels.TpaymentMethod", "intPaymentMethodNavigation")
                        .WithMany("Torders")
                        .HasForeignKey("intPaymentMethod")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_PaymentMethod");

                    b.HasOne("SobeeYouCORE.Models.DbModels.TshippingStatus", "intShippingStatus")
                        .WithMany("Torders")
                        .HasForeignKey("intShippingStatusID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_TOrders_TShippingStatus");

                    b.HasOne("SobeeYouCORE.Models.DbModels.Tuser", "Tuser")
                        .WithMany("Torders")
                        .HasForeignKey("intUserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__TOrders__intUser__0FEC5ADD");

                    b.HasOne("SobeeYouCORE.Models.DbModels.Identity.AspNetUser", "User")
                        .WithMany("Torders")
                        .HasForeignKey("userID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_TORders_AspNetUsers");

                    b.Navigation("Tuser");

                    b.Navigation("User");

                    b.Navigation("intPaymentMethodNavigation");

                    b.Navigation("intShippingStatus");
                });

            modelBuilder.Entity("SobeeYouCORE.Models.DbModels.TorderItem", b =>
                {
                    b.HasOne("SobeeYouCORE.Models.DbModels.Torder", "intOrder")
                        .WithMany("TorderItems")
                        .HasForeignKey("intOrderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__TOrderIte__intOr__12C8C788");

                    b.HasOne("SobeeYouCORE.Models.DbModels.Tproduct", "intProduct")
                        .WithMany("TorderItems")
                        .HasForeignKey("intProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__TOrderIte__intPr__13BCEBC1");

                    b.Navigation("intOrder");

                    b.Navigation("intProduct");
                });

            modelBuilder.Entity("SobeeYouCORE.Models.DbModels.TordersProduct", b =>
                {
                    b.HasOne("SobeeYouCORE.Models.DbModels.Tproduct", "intProduct")
                        .WithMany("TordersProducts")
                        .HasForeignKey("intProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("intProduct");
                });

            modelBuilder.Entity("SobeeYouCORE.Models.DbModels.TproductRecommendation", b =>
                {
                    b.HasOne("SobeeYouCORE.Models.DbModels.Tproduct", "intProduct")
                        .WithMany("TproductRecommendations")
                        .HasForeignKey("intProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("TProductRecommendations_TProducts_FK");

                    b.HasOne("SobeeYouCORE.Models.DbModels.Tuser", "intUser")
                        .WithMany("TproductRecommendations")
                        .HasForeignKey("intUserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("TProductRecommendations_TUsers_FK");

                    b.HasOne("SobeeYouCORE.Models.DbModels.Identity.AspNetUser", "user")
                        .WithMany("TproductRecommendations")
                        .HasForeignKey("userID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_TProductRecommendations_AspNetUsers");

                    b.Navigation("intProduct");

                    b.Navigation("intUser");

                    b.Navigation("user");
                });

            modelBuilder.Entity("SobeeYouCORE.Models.DbModels.Treview", b =>
                {
                    b.HasOne("SobeeYouCORE.Models.DbModels.Tproduct", "intProduct")
                        .WithMany("Treviews")
                        .HasForeignKey("intProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("TReviews_TProducts_FK");

                    b.HasOne("SobeeYouCORE.Models.DbModels.Tuser", "intUser")
                        .WithMany("Treviews")
                        .HasForeignKey("intUserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("TReviews_TUsers_FK");

                    b.HasOne("SobeeYouCORE.Models.DbModels.Identity.AspNetUser", "user")
                        .WithMany("Treviews")
                        .HasForeignKey("userID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_TReviews_AspNetUsers");

                    b.Navigation("intProduct");

                    b.Navigation("intUser");

                    b.Navigation("user");
                });

            modelBuilder.Entity("SobeeYouCORE.Models.DbModels.TshoppingCart", b =>
                {
                    b.HasOne("SobeeYouCORE.Models.DbModels.Identity.AspNetUser", "user")
                        .WithMany("TshoppingCarts")
                        .HasForeignKey("userID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_TShoppingCarts_AspNetUsers");

                    b.Navigation("user");
                });

            modelBuilder.Entity("SobeeYouCORE.Models.DbModels.Tuser", b =>
                {
                    b.HasOne("SobeeYouCORE.Models.DbModels.TuserRole", "intUserRole")
                        .WithMany("Tusers")
                        .HasForeignKey("intUserRoleID")
                        .HasConstraintName("FK_intUserRoleID");

                    b.Navigation("intUserRole");
                });

            modelBuilder.Entity("SobeeYouCORE.Models.DbModels.Identity.AspNetRole", b =>
                {
                    b.Navigation("AspNetRoleClaims");
                });

            modelBuilder.Entity("SobeeYouCORE.Models.DbModels.Identity.AspNetUser", b =>
                {
                    b.Navigation("AspNetUserClaims");

                    b.Navigation("AspNetUserLogins");

                    b.Navigation("AspNetUserTokens");

                    b.Navigation("TcustomerServiceTicket");

                    b.Navigation("Torders");

                    b.Navigation("TproductRecommendations");

                    b.Navigation("Treviews");

                    b.Navigation("TshoppingCarts");
                });

            modelBuilder.Entity("SobeeYouCORE.Models.DbModels.Torder", b =>
                {
                    b.Navigation("TorderItems");
                });

            modelBuilder.Entity("SobeeYouCORE.Models.DbModels.TpaymentMethod", b =>
                {
                    b.Navigation("Torders");
                });

            modelBuilder.Entity("SobeeYouCORE.Models.DbModels.Tproduct", b =>
                {
                    b.Navigation("TcartItems");

                    b.Navigation("TorderItems");

                    b.Navigation("TordersProducts");

                    b.Navigation("TproductRecommendations");

                    b.Navigation("Treviews");
                });

            modelBuilder.Entity("SobeeYouCORE.Models.DbModels.TshippingStatus", b =>
                {
                    b.Navigation("Torders");
                });

            modelBuilder.Entity("SobeeYouCORE.Models.DbModels.TshoppingCart", b =>
                {
                    b.Navigation("TcartItems");
                });

            modelBuilder.Entity("SobeeYouCORE.Models.DbModels.TticketCategory", b =>
                {
                    b.Navigation("TcustomerServiceTicket");
                });

            modelBuilder.Entity("SobeeYouCORE.Models.DbModels.TticketStatus", b =>
                {
                    b.Navigation("tcustomerServiceTickets");
                });

            modelBuilder.Entity("SobeeYouCORE.Models.DbModels.Tuser", b =>
                {
                    b.Navigation("TcustomerServiceTickets");

                    b.Navigation("Torders");

                    b.Navigation("TproductRecommendations");

                    b.Navigation("Treviews");
                });

            modelBuilder.Entity("SobeeYouCORE.Models.DbModels.TuserRole", b =>
                {
                    b.Navigation("Tusers");
                });
#pragma warning restore 612, 618
        }
    }
}
