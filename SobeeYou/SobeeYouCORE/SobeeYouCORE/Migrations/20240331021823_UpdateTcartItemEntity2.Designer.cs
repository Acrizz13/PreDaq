// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SobeeYouCORE.Data;

#nullable disable

namespace SobeeYouCORE.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240331021823_UpdateTcartItemEntity2")]
    partial class UpdateTcartItemEntity2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("SobeeYouCORE.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastLoginDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("intUserRoleID")
                        .HasColumnType("int");

                    b.Property<string>("strBillingAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("strFirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("strLastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("strShippingAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("SobeeYouCORE.Models.DbModels.TcartItem", b =>
                {
                    b.Property<int>("intCartItemID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("intCartItemID"));

                    b.Property<int>("ProductintProductID")
                        .HasColumnType("int");

                    b.Property<int>("ShoppingCartintShoppingCartID")
                        .HasColumnType("int");

                    b.Property<DateTime>("dtmDateAdded")
                        .HasColumnType("datetime2");

                    b.Property<int>("intProductID")
                        .HasColumnType("int");

                    b.Property<int>("intQuantity")
                        .HasColumnType("int");

                    b.Property<int>("intShoppingCartID")
                        .HasColumnType("int");

                    b.HasKey("intCartItemID");

                    b.HasIndex("ProductintProductID");

                    b.HasIndex("ShoppingCartintShoppingCartID");

                    b.ToTable("TcartItem");
                });

            modelBuilder.Entity("SobeeYouCORE.Models.DbModels.TcustomerServiceTicket", b =>
                {
                    b.Property<int>("intCustomerServiceTicketID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("intCustomerServiceTicketID"));

                    b.Property<int>("TicketCategoryintTicketCategoryID")
                        .HasColumnType("int");

                    b.Property<int>("TicketStatusintTicketStatusID")
                        .HasColumnType("int");

                    b.Property<int>("UserintUserID")
                        .HasColumnType("int");

                    b.Property<DateTime>("dtmTimeOfSubmission")
                        .HasColumnType("datetime2");

                    b.Property<int>("intTicketCategoryID")
                        .HasColumnType("int");

                    b.Property<int>("intTicketStatusID")
                        .HasColumnType("int");

                    b.Property<int>("intUserID")
                        .HasColumnType("int");

                    b.Property<string>("strDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("intCustomerServiceTicketID");

                    b.HasIndex("TicketCategoryintTicketCategoryID");

                    b.HasIndex("TicketStatusintTicketStatusID");

                    b.HasIndex("UserintUserID");

                    b.ToTable("TcustomerServiceTicket");
                });

            modelBuilder.Entity("SobeeYouCORE.Models.DbModels.Torder", b =>
                {
                    b.Property<int>("intOrderID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("intOrderID"));

                    b.Property<int>("PaymentMethodintPaymentMethod")
                        .HasColumnType("int");

                    b.Property<int>("ShippingStatusintShippingStatusID")
                        .HasColumnType("int");

                    b.Property<int>("UserintUserID")
                        .HasColumnType("int");

                    b.Property<decimal>("decTotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("dtmOrderDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("intPaymentMethod")
                        .HasColumnType("int");

                    b.Property<int>("intShippingStatusID")
                        .HasColumnType("int");

                    b.Property<int>("intUserID")
                        .HasColumnType("int");

                    b.Property<string>("strOrderStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("strShippingAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("strTrackingNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("intOrderID");

                    b.HasIndex("PaymentMethodintPaymentMethod");

                    b.HasIndex("ShippingStatusintShippingStatusID");

                    b.HasIndex("UserintUserID");

                    b.ToTable("Torder");
                });

            modelBuilder.Entity("SobeeYouCORE.Models.DbModels.TorderItem", b =>
                {
                    b.Property<int>("intOrderItemID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("intOrderItemID"));

                    b.Property<int>("OrderintOrderID")
                        .HasColumnType("int");

                    b.Property<int>("ProductintProductID")
                        .HasColumnType("int");

                    b.Property<int>("intOrderID")
                        .HasColumnType("int");

                    b.Property<int>("intProductID")
                        .HasColumnType("int");

                    b.Property<int>("intQuantity")
                        .HasColumnType("int");

                    b.Property<decimal>("monPricePerUnit")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("intOrderItemID");

                    b.HasIndex("OrderintOrderID");

                    b.HasIndex("ProductintProductID");

                    b.ToTable("TorderItem");
                });

            modelBuilder.Entity("SobeeYouCORE.Models.DbModels.TordersProduct", b =>
                {
                    b.Property<int>("IntOrdersProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IntOrdersProductId"));

                    b.Property<int>("ProductintProductID")
                        .HasColumnType("int");

                    b.Property<int>("intProductID")
                        .HasColumnType("int");

                    b.Property<string>("strOrdersProduct")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IntOrdersProductId");

                    b.HasIndex("ProductintProductID");

                    b.ToTable("TordersProduct");
                });

            modelBuilder.Entity("SobeeYouCORE.Models.DbModels.TpaymentMethod", b =>
                {
                    b.Property<int>("intPaymentMethod")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("intPaymentMethod"));

                    b.Property<string>("strPaymentMethodName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("intPaymentMethod");

                    b.ToTable("TpaymentMethod");
                });

            modelBuilder.Entity("SobeeYouCORE.Models.DbModels.Tproduct", b =>
                {
                    b.Property<int>("intProductID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("intProductID"));

                    b.Property<decimal>("decPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("strName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("strPrice")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("strStockAmount")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("intProductID");

                    b.ToTable("Tproduct");
                });

            modelBuilder.Entity("SobeeYouCORE.Models.DbModels.TproductRecommendation", b =>
                {
                    b.Property<int>("intProductRecommendationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("intProductRecommendationID"));

                    b.Property<int>("ProductintProductID")
                        .HasColumnType("int");

                    b.Property<int>("UserintUserID")
                        .HasColumnType("int");

                    b.Property<DateTime>("dtmTimeOfRecommendation")
                        .HasColumnType("datetime2");

                    b.Property<int>("intProductID")
                        .HasColumnType("int");

                    b.Property<int>("intUserID")
                        .HasColumnType("int");

                    b.Property<string>("strRelevantScore")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("intProductRecommendationID");

                    b.HasIndex("ProductintProductID");

                    b.HasIndex("UserintUserID");

                    b.ToTable("TproductRecommendation");
                });

            modelBuilder.Entity("SobeeYouCORE.Models.DbModels.Treview", b =>
                {
                    b.Property<int>("intReviewID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("intReviewID"));

                    b.Property<int>("ProductintProductID")
                        .HasColumnType("int");

                    b.Property<int>("UserintUserID")
                        .HasColumnType("int");

                    b.Property<int>("intProductID")
                        .HasColumnType("int");

                    b.Property<int>("intUserID")
                        .HasColumnType("int");

                    b.Property<string>("strRating")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("strReviewText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("intReviewID");

                    b.HasIndex("ProductintProductID");

                    b.HasIndex("UserintUserID");

                    b.ToTable("Treview");
                });

            modelBuilder.Entity("SobeeYouCORE.Models.DbModels.TshippingStatus", b =>
                {
                    b.Property<int>("intShippingStatusID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("intShippingStatusID"));

                    b.Property<string>("strShippingStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("intShippingStatusID");

                    b.ToTable("TshippingStatus");
                });

            modelBuilder.Entity("SobeeYouCORE.Models.DbModels.TshoppingCart", b =>
                {
                    b.Property<int>("intShoppingCartID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("intShoppingCartID"));

                    b.Property<int?>("TuserintUserID")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("dtmDateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("dtmDateLastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("user_id")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("intShoppingCartID");

                    b.HasIndex("TuserintUserID");

                    b.HasIndex("UserId");

                    b.ToTable("TshoppingCart");
                });

            modelBuilder.Entity("SobeeYouCORE.Models.DbModels.TticketCategory", b =>
                {
                    b.Property<int>("intTicketCategoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("intTicketCategoryID"));

                    b.Property<string>("strTicketCategory")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("intTicketCategoryID");

                    b.ToTable("TticketCategory");
                });

            modelBuilder.Entity("SobeeYouCORE.Models.DbModels.TticketStatus", b =>
                {
                    b.Property<int>("intTicketStatusID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("intTicketStatusID"));

                    b.Property<string>("strTicketStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("intTicketStatusID");

                    b.ToTable("TticketStatus");
                });

            modelBuilder.Entity("SobeeYouCORE.Models.DbModels.Tuser", b =>
                {
                    b.Property<int>("intUserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("intUserID"));

                    b.Property<string>("ID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserRoleintUserRoleID")
                        .HasColumnType("int");

                    b.Property<int>("intUserRoleID")
                        .HasColumnType("int");

                    b.Property<string>("strBillingAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("strDateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("strEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("strFirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("strLastLoginDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("strLastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("strPassword")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("strShippingAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("intUserID");

                    b.HasIndex("UserRoleintUserRoleID");

                    b.ToTable("Tuser");
                });

            modelBuilder.Entity("SobeeYouCORE.Models.DbModels.TuserRole", b =>
                {
                    b.Property<int>("intUserRoleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("intUserRoleID"));

                    b.Property<string>("strRole")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("intUserRoleID");

                    b.ToTable("TuserRole");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("SobeeYouCORE.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("SobeeYouCORE.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SobeeYouCORE.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("SobeeYouCORE.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SobeeYouCORE.Models.DbModels.TcartItem", b =>
                {
                    b.HasOne("SobeeYouCORE.Models.DbModels.Tproduct", "Product")
                        .WithMany("CartItems")
                        .HasForeignKey("ProductintProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SobeeYouCORE.Models.DbModels.TshoppingCart", "ShoppingCart")
                        .WithMany("CartItems")
                        .HasForeignKey("ShoppingCartintShoppingCartID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("ShoppingCart");
                });

            modelBuilder.Entity("SobeeYouCORE.Models.DbModels.TcustomerServiceTicket", b =>
                {
                    b.HasOne("SobeeYouCORE.Models.DbModels.TticketCategory", "TicketCategory")
                        .WithMany("CustomerServiceTickets")
                        .HasForeignKey("TicketCategoryintTicketCategoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SobeeYouCORE.Models.DbModels.TticketStatus", "TicketStatus")
                        .WithMany("CustomerServiceTickets")
                        .HasForeignKey("TicketStatusintTicketStatusID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SobeeYouCORE.Models.DbModels.Tuser", "User")
                        .WithMany("CustomerServiceTickets")
                        .HasForeignKey("UserintUserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TicketCategory");

                    b.Navigation("TicketStatus");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SobeeYouCORE.Models.DbModels.Torder", b =>
                {
                    b.HasOne("SobeeYouCORE.Models.DbModels.TpaymentMethod", "PaymentMethod")
                        .WithMany("Orders")
                        .HasForeignKey("PaymentMethodintPaymentMethod")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SobeeYouCORE.Models.DbModels.TshippingStatus", "ShippingStatus")
                        .WithMany("Orders")
                        .HasForeignKey("ShippingStatusintShippingStatusID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SobeeYouCORE.Models.DbModels.Tuser", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserintUserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PaymentMethod");

                    b.Navigation("ShippingStatus");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SobeeYouCORE.Models.DbModels.TorderItem", b =>
                {
                    b.HasOne("SobeeYouCORE.Models.DbModels.Torder", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderintOrderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SobeeYouCORE.Models.DbModels.Tproduct", "Product")
                        .WithMany("OrderItems")
                        .HasForeignKey("ProductintProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("SobeeYouCORE.Models.DbModels.TordersProduct", b =>
                {
                    b.HasOne("SobeeYouCORE.Models.DbModels.Tproduct", "Product")
                        .WithMany("OrdersProducts")
                        .HasForeignKey("ProductintProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("SobeeYouCORE.Models.DbModels.TproductRecommendation", b =>
                {
                    b.HasOne("SobeeYouCORE.Models.DbModels.Tproduct", "Product")
                        .WithMany("ProductRecommendations")
                        .HasForeignKey("ProductintProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SobeeYouCORE.Models.DbModels.Tuser", "User")
                        .WithMany("ProductRecommendations")
                        .HasForeignKey("UserintUserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SobeeYouCORE.Models.DbModels.Treview", b =>
                {
                    b.HasOne("SobeeYouCORE.Models.DbModels.Tproduct", "Product")
                        .WithMany("Reviews")
                        .HasForeignKey("ProductintProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SobeeYouCORE.Models.DbModels.Tuser", "User")
                        .WithMany("Reviews")
                        .HasForeignKey("UserintUserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SobeeYouCORE.Models.DbModels.TshoppingCart", b =>
                {
                    b.HasOne("SobeeYouCORE.Models.DbModels.Tuser", null)
                        .WithMany("ShoppingCarts")
                        .HasForeignKey("TuserintUserID");

                    b.HasOne("SobeeYouCORE.Models.ApplicationUser", "User")
                        .WithMany("ShoppingCarts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SobeeYouCORE.Models.DbModels.Tuser", b =>
                {
                    b.HasOne("SobeeYouCORE.Models.DbModels.TuserRole", "UserRole")
                        .WithMany("Users")
                        .HasForeignKey("UserRoleintUserRoleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserRole");
                });

            modelBuilder.Entity("SobeeYouCORE.Models.ApplicationUser", b =>
                {
                    b.Navigation("ShoppingCarts");
                });

            modelBuilder.Entity("SobeeYouCORE.Models.DbModels.Torder", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("SobeeYouCORE.Models.DbModels.TpaymentMethod", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("SobeeYouCORE.Models.DbModels.Tproduct", b =>
                {
                    b.Navigation("CartItems");

                    b.Navigation("OrderItems");

                    b.Navigation("OrdersProducts");

                    b.Navigation("ProductRecommendations");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("SobeeYouCORE.Models.DbModels.TshippingStatus", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("SobeeYouCORE.Models.DbModels.TshoppingCart", b =>
                {
                    b.Navigation("CartItems");
                });

            modelBuilder.Entity("SobeeYouCORE.Models.DbModels.TticketCategory", b =>
                {
                    b.Navigation("CustomerServiceTickets");
                });

            modelBuilder.Entity("SobeeYouCORE.Models.DbModels.TticketStatus", b =>
                {
                    b.Navigation("CustomerServiceTickets");
                });

            modelBuilder.Entity("SobeeYouCORE.Models.DbModels.Tuser", b =>
                {
                    b.Navigation("CustomerServiceTickets");

                    b.Navigation("Orders");

                    b.Navigation("ProductRecommendations");

                    b.Navigation("Reviews");

                    b.Navigation("ShoppingCarts");
                });

            modelBuilder.Entity("SobeeYouCORE.Models.DbModels.TuserRole", b =>
                {
                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
