// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SobeeYouCORE.Data;

#nullable disable

namespace SobeeYouCORE.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240407200657_CreateIdentityTables")]
    partial class CreateIdentityTables
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AspNetRoleAspNetUser", b =>
                {
                    b.Property<string>("RolesId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UsersId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("RolesId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("AspNetRoleAspNetUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("SobeeYouCORE.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastLoginDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("intUserRoleID")
                        .HasColumnType("int");

                    b.Property<string>("strBillingAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("strFirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("strLastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("strShippingAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("SobeeYouCORE.Models.DbModels.Identity.AspNetRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AspNetRole");
                });

            modelBuilder.Entity("SobeeYouCORE.Models.DbModels.Identity.AspNetRoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaim");
                });

            modelBuilder.Entity("SobeeYouCORE.Models.DbModels.Identity.AspNetUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<int>("IntUserRoleId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastLoginDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StrBillingAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StrFirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StrLastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StrShippingAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AspNetUser");
                });

            modelBuilder.Entity("SobeeYouCORE.Models.DbModels.Identity.AspNetUserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaim");
                });

            modelBuilder.Entity("SobeeYouCORE.Models.DbModels.Identity.AspNetUserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProviderKey")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogin");
                });

            modelBuilder.Entity("SobeeYouCORE.Models.DbModels.Identity.AspNetUserToken", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId1")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.HasIndex("UserId1");

                    b.ToTable("AspNetUserToken");
                });

            modelBuilder.Entity("SobeeYouCORE.Models.DbModels.TcartItem", b =>
                {
                    b.Property<int>("IntCartItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IntCartItemId"));

                    b.Property<DateTime?>("DtmDateAdded")
                        .HasColumnType("datetime2");

                    b.Property<int?>("IntProductId")
                        .HasColumnType("int");

                    b.Property<int?>("IntQuantity")
                        .HasColumnType("int");

                    b.Property<int?>("IntShoppingCartId")
                        .HasColumnType("int");

                    b.HasKey("IntCartItemId");

                    b.HasIndex("IntProductId");

                    b.HasIndex("IntShoppingCartId");

                    b.ToTable("TcartItem");
                });

            modelBuilder.Entity("SobeeYouCORE.Models.DbModels.TcustomerServiceTicket", b =>
                {
                    b.Property<int>("IntCustomerServiceTicketId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IntCustomerServiceTicketId"));

                    b.Property<DateTime>("DtmTimeOfSubmission")
                        .HasColumnType("datetime2");

                    b.Property<int>("IntTicketCategoryId")
                        .HasColumnType("int");

                    b.Property<int>("IntTicketStatusId")
                        .HasColumnType("int");

                    b.Property<int>("IntUserId")
                        .HasColumnType("int");

                    b.Property<string>("SessionId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StrDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("IntCustomerServiceTicketId");

                    b.HasIndex("IntTicketCategoryId");

                    b.HasIndex("IntTicketStatusId");

                    b.HasIndex("IntUserId");

                    b.HasIndex("UserId");

                    b.ToTable("TcustomerServiceTicket");
                });

            modelBuilder.Entity("SobeeYouCORE.Models.DbModels.Torder", b =>
                {
                    b.Property<int>("IntOrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IntOrderId"));

                    b.Property<decimal?>("DecTotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("DtmOrderDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("IntPaymentMethod")
                        .HasColumnType("int");

                    b.Property<int?>("IntPaymentMethodNavigationIntPaymentMethod")
                        .HasColumnType("int");

                    b.Property<int?>("IntShippingStatusId")
                        .HasColumnType("int");

                    b.Property<int?>("IntUserId")
                        .HasColumnType("int");

                    b.Property<string>("SessionId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StrOrderStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StrShippingAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StrTrackingNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("IntOrderId");

                    b.HasIndex("IntPaymentMethodNavigationIntPaymentMethod");

                    b.HasIndex("IntShippingStatusId");

                    b.HasIndex("IntUserId");

                    b.HasIndex("UserId");

                    b.ToTable("Torder");
                });

            modelBuilder.Entity("SobeeYouCORE.Models.DbModels.TorderItem", b =>
                {
                    b.Property<int>("IntOrderItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IntOrderItemId"));

                    b.Property<int?>("IntOrderId")
                        .HasColumnType("int");

                    b.Property<int?>("IntProductId")
                        .HasColumnType("int");

                    b.Property<int?>("IntQuantity")
                        .HasColumnType("int");

                    b.Property<decimal?>("MonPricePerUnit")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("IntOrderItemId");

                    b.HasIndex("IntOrderId");

                    b.HasIndex("IntProductId");

                    b.ToTable("TorderItem");
                });

            modelBuilder.Entity("SobeeYouCORE.Models.DbModels.TordersProduct", b =>
                {
                    b.Property<int>("IntOrdersProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IntOrdersProductId"));

                    b.Property<int>("IntProductId")
                        .HasColumnType("int");

                    b.Property<string>("StrOrdersProduct")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IntOrdersProductId");

                    b.HasIndex("IntProductId");

                    b.ToTable("TordersProduct");
                });

            modelBuilder.Entity("SobeeYouCORE.Models.DbModels.TpaymentMethod", b =>
                {
                    b.Property<int>("IntPaymentMethod")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IntPaymentMethod"));

                    b.Property<string>("StrPaymentMethodName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IntPaymentMethod");

                    b.ToTable("TpaymentMethod");
                });

            modelBuilder.Entity("SobeeYouCORE.Models.DbModels.Tproduct", b =>
                {
                    b.Property<int>("IntProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IntProductId"));

                    b.Property<decimal?>("DecPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("StrName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StrPrice")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StrStockAmount")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IntProductId");

                    b.ToTable("Tproduct");
                });

            modelBuilder.Entity("SobeeYouCORE.Models.DbModels.TproductRecommendation", b =>
                {
                    b.Property<int>("IntProductRecommendationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IntProductRecommendationId"));

                    b.Property<DateTime>("DtmTimeOfRecommendation")
                        .HasColumnType("datetime2");

                    b.Property<int>("IntProductId")
                        .HasColumnType("int");

                    b.Property<int>("IntUserId")
                        .HasColumnType("int");

                    b.Property<string>("SessionId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StrRelevantScore")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("IntProductRecommendationId");

                    b.HasIndex("IntProductId");

                    b.HasIndex("IntUserId");

                    b.HasIndex("UserId");

                    b.ToTable("TproductRecommendation");
                });

            modelBuilder.Entity("SobeeYouCORE.Models.DbModels.Treview", b =>
                {
                    b.Property<int>("IntReviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IntReviewId"));

                    b.Property<int>("IntProductId")
                        .HasColumnType("int");

                    b.Property<int>("IntUserId")
                        .HasColumnType("int");

                    b.Property<string>("SessionId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StrRating")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StrReviewText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("IntReviewId");

                    b.HasIndex("IntProductId");

                    b.HasIndex("IntUserId");

                    b.HasIndex("UserId");

                    b.ToTable("Treview");
                });

            modelBuilder.Entity("SobeeYouCORE.Models.DbModels.TshippingStatus", b =>
                {
                    b.Property<int>("IntShippingStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IntShippingStatusId"));

                    b.Property<string>("StrShippingStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IntShippingStatusId");

                    b.ToTable("TshippingStatus");
                });

            modelBuilder.Entity("SobeeYouCORE.Models.DbModels.TshoppingCart", b =>
                {
                    b.Property<int>("IntShoppingCartId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IntShoppingCartId"));

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DtmDateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DtmDateLastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("SessionId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("IntShoppingCartId");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("UserId");

                    b.ToTable("TshoppingCart");
                });

            modelBuilder.Entity("SobeeYouCORE.Models.DbModels.TticketCategory", b =>
                {
                    b.Property<int>("IntTicketCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IntTicketCategoryId"));

                    b.Property<string>("StrTicketCategory")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IntTicketCategoryId");

                    b.ToTable("TticketCategory");
                });

            modelBuilder.Entity("SobeeYouCORE.Models.DbModels.TticketStatus", b =>
                {
                    b.Property<int>("IntTicketStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IntTicketStatusId"));

                    b.Property<string>("StrTicketStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IntTicketStatusId");

                    b.ToTable("TticketStatus");
                });

            modelBuilder.Entity("SobeeYouCORE.Models.DbModels.Tuser", b =>
                {
                    b.Property<int>("IntUserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IntUserId"));

                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("IntUserRoleId")
                        .HasColumnType("int");

                    b.Property<string>("StrBillingAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("StrDateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("StrEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StrFirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("StrLastLoginDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("StrLastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StrPassword")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StrShippingAddress")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IntUserId");

                    b.HasIndex("IntUserRoleId");

                    b.ToTable("Tuser");
                });

            modelBuilder.Entity("SobeeYouCORE.Models.DbModels.TuserRole", b =>
                {
                    b.Property<int>("IntUserRoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IntUserRoleId"));

                    b.Property<string>("StrRole")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IntUserRoleId");

                    b.ToTable("TuserRole");
                });

            modelBuilder.Entity("AspNetRoleAspNetUser", b =>
                {
                    b.HasOne("SobeeYouCORE.Models.DbModels.Identity.AspNetRole", null)
                        .WithMany()
                        .HasForeignKey("RolesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SobeeYouCORE.Models.DbModels.Identity.AspNetUser", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("SobeeYouCORE.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("SobeeYouCORE.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SobeeYouCORE.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("SobeeYouCORE.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SobeeYouCORE.Models.DbModels.Identity.AspNetRoleClaim", b =>
                {
                    b.HasOne("SobeeYouCORE.Models.DbModels.Identity.AspNetRole", "Role")
                        .WithMany("AspNetRoleClaims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("SobeeYouCORE.Models.DbModels.Identity.AspNetUserClaim", b =>
                {
                    b.HasOne("SobeeYouCORE.Models.DbModels.Identity.AspNetUser", "User")
                        .WithMany("AspNetUserClaims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SobeeYouCORE.Models.DbModels.Identity.AspNetUserLogin", b =>
                {
                    b.HasOne("SobeeYouCORE.Models.DbModels.Identity.AspNetUser", "User")
                        .WithMany("AspNetUserLogins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SobeeYouCORE.Models.DbModels.Identity.AspNetUserToken", b =>
                {
                    b.HasOne("SobeeYouCORE.Models.DbModels.Identity.AspNetUser", "User")
                        .WithMany("AspNetUserTokens")
                        .HasForeignKey("UserId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SobeeYouCORE.Models.DbModels.TcartItem", b =>
                {
                    b.HasOne("SobeeYouCORE.Models.DbModels.Tproduct", "IntProduct")
                        .WithMany("TcartItems")
                        .HasForeignKey("IntProductId");

                    b.HasOne("SobeeYouCORE.Models.DbModels.TshoppingCart", "IntShoppingCart")
                        .WithMany("TcartItems")
                        .HasForeignKey("IntShoppingCartId");

                    b.Navigation("IntProduct");

                    b.Navigation("IntShoppingCart");
                });

            modelBuilder.Entity("SobeeYouCORE.Models.DbModels.TcustomerServiceTicket", b =>
                {
                    b.HasOne("SobeeYouCORE.Models.DbModels.TticketCategory", "IntTicketCategory")
                        .WithMany("TcustomerServiceTickets")
                        .HasForeignKey("IntTicketCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SobeeYouCORE.Models.DbModels.TticketStatus", "IntTicketStatus")
                        .WithMany("TcustomerServiceTickets")
                        .HasForeignKey("IntTicketStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SobeeYouCORE.Models.DbModels.Tuser", "IntUser")
                        .WithMany("TcustomerServiceTickets")
                        .HasForeignKey("IntUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SobeeYouCORE.Models.DbModels.Identity.AspNetUser", "User")
                        .WithMany("TcustomerServiceTickets")
                        .HasForeignKey("UserId");

                    b.Navigation("IntTicketCategory");

                    b.Navigation("IntTicketStatus");

                    b.Navigation("IntUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SobeeYouCORE.Models.DbModels.Torder", b =>
                {
                    b.HasOne("SobeeYouCORE.Models.DbModels.TpaymentMethod", "IntPaymentMethodNavigation")
                        .WithMany("Torders")
                        .HasForeignKey("IntPaymentMethodNavigationIntPaymentMethod");

                    b.HasOne("SobeeYouCORE.Models.DbModels.TshippingStatus", "IntShippingStatus")
                        .WithMany("Torders")
                        .HasForeignKey("IntShippingStatusId");

                    b.HasOne("SobeeYouCORE.Models.DbModels.Tuser", "IntUser")
                        .WithMany("Torders")
                        .HasForeignKey("IntUserId");

                    b.HasOne("SobeeYouCORE.Models.DbModels.Identity.AspNetUser", "User")
                        .WithMany("Torders")
                        .HasForeignKey("UserId");

                    b.Navigation("IntPaymentMethodNavigation");

                    b.Navigation("IntShippingStatus");

                    b.Navigation("IntUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SobeeYouCORE.Models.DbModels.TorderItem", b =>
                {
                    b.HasOne("SobeeYouCORE.Models.DbModels.Torder", "IntOrder")
                        .WithMany("TorderItems")
                        .HasForeignKey("IntOrderId");

                    b.HasOne("SobeeYouCORE.Models.DbModels.Tproduct", "IntProduct")
                        .WithMany("TorderItems")
                        .HasForeignKey("IntProductId");

                    b.Navigation("IntOrder");

                    b.Navigation("IntProduct");
                });

            modelBuilder.Entity("SobeeYouCORE.Models.DbModels.TordersProduct", b =>
                {
                    b.HasOne("SobeeYouCORE.Models.DbModels.Tproduct", "IntProduct")
                        .WithMany("TordersProducts")
                        .HasForeignKey("IntProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IntProduct");
                });

            modelBuilder.Entity("SobeeYouCORE.Models.DbModels.TproductRecommendation", b =>
                {
                    b.HasOne("SobeeYouCORE.Models.DbModels.Tproduct", "IntProduct")
                        .WithMany("TproductRecommendations")
                        .HasForeignKey("IntProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SobeeYouCORE.Models.DbModels.Tuser", "IntUser")
                        .WithMany("TproductRecommendations")
                        .HasForeignKey("IntUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SobeeYouCORE.Models.DbModels.Identity.AspNetUser", "User")
                        .WithMany("TproductRecommendations")
                        .HasForeignKey("UserId");

                    b.Navigation("IntProduct");

                    b.Navigation("IntUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SobeeYouCORE.Models.DbModels.Treview", b =>
                {
                    b.HasOne("SobeeYouCORE.Models.DbModels.Tproduct", "IntProduct")
                        .WithMany("Treviews")
                        .HasForeignKey("IntProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SobeeYouCORE.Models.DbModels.Tuser", "IntUser")
                        .WithMany("Treviews")
                        .HasForeignKey("IntUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SobeeYouCORE.Models.DbModels.Identity.AspNetUser", "User")
                        .WithMany("Treviews")
                        .HasForeignKey("UserId");

                    b.Navigation("IntProduct");

                    b.Navigation("IntUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SobeeYouCORE.Models.DbModels.TshoppingCart", b =>
                {
                    b.HasOne("SobeeYouCORE.Models.ApplicationUser", null)
                        .WithMany("ShoppingCarts")
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("SobeeYouCORE.Models.DbModels.Identity.AspNetUser", "User")
                        .WithMany("TshoppingCarts")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SobeeYouCORE.Models.DbModels.Tuser", b =>
                {
                    b.HasOne("SobeeYouCORE.Models.DbModels.TuserRole", "IntUserRole")
                        .WithMany("Tusers")
                        .HasForeignKey("IntUserRoleId");

                    b.Navigation("IntUserRole");
                });

            modelBuilder.Entity("SobeeYouCORE.Models.ApplicationUser", b =>
                {
                    b.Navigation("ShoppingCarts");
                });

            modelBuilder.Entity("SobeeYouCORE.Models.DbModels.Identity.AspNetRole", b =>
                {
                    b.Navigation("AspNetRoleClaims");
                });

            modelBuilder.Entity("SobeeYouCORE.Models.DbModels.Identity.AspNetUser", b =>
                {
                    b.Navigation("AspNetUserClaims");

                    b.Navigation("AspNetUserLogins");

                    b.Navigation("AspNetUserTokens");

                    b.Navigation("TcustomerServiceTickets");

                    b.Navigation("Torders");

                    b.Navigation("TproductRecommendations");

                    b.Navigation("Treviews");

                    b.Navigation("TshoppingCarts");
                });

            modelBuilder.Entity("SobeeYouCORE.Models.DbModels.Torder", b =>
                {
                    b.Navigation("TorderItems");
                });

            modelBuilder.Entity("SobeeYouCORE.Models.DbModels.TpaymentMethod", b =>
                {
                    b.Navigation("Torders");
                });

            modelBuilder.Entity("SobeeYouCORE.Models.DbModels.Tproduct", b =>
                {
                    b.Navigation("TcartItems");

                    b.Navigation("TorderItems");

                    b.Navigation("TordersProducts");

                    b.Navigation("TproductRecommendations");

                    b.Navigation("Treviews");
                });

            modelBuilder.Entity("SobeeYouCORE.Models.DbModels.TshippingStatus", b =>
                {
                    b.Navigation("Torders");
                });

            modelBuilder.Entity("SobeeYouCORE.Models.DbModels.TshoppingCart", b =>
                {
                    b.Navigation("TcartItems");
                });

            modelBuilder.Entity("SobeeYouCORE.Models.DbModels.TticketCategory", b =>
                {
                    b.Navigation("TcustomerServiceTickets");
                });

            modelBuilder.Entity("SobeeYouCORE.Models.DbModels.TticketStatus", b =>
                {
                    b.Navigation("TcustomerServiceTickets");
                });

            modelBuilder.Entity("SobeeYouCORE.Models.DbModels.Tuser", b =>
                {
                    b.Navigation("TcustomerServiceTickets");

                    b.Navigation("Torders");

                    b.Navigation("TproductRecommendations");

                    b.Navigation("Treviews");
                });

            modelBuilder.Entity("SobeeYouCORE.Models.DbModels.TuserRole", b =>
                {
                    b.Navigation("Tusers");
                });
#pragma warning restore 612, 618
        }
    }
}
